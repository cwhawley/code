/* Monthly Comms contact list. Change reporting period as needed. */
WITH ginger_text AS
(
    SELECT DISTINCT
      ps_ss_nbr,
      COALESCE(c.firstname, prt_first)                             AS name_first,
      COALESCE(c.lastname, prt_last)                               AS name_last,
      COALESCE(c.birthdate :: date, prt_birth_date :: date)        AS birthdate,
      COALESCE(c.mailingcity, prt_city)                            AS city,
      COALESCE(c.mailingpostalcode, CAST(prt_zip_code AS VARCHAR)) AS zip_code,
      CASE WHEN ps_6_hours >= 80 AND ps_welfare_status = 'E' AND ps_reason_code = ''
        THEN 'Enrolled'
      WHEN ps_6_hours >= 80 AND ps_welfare_status != 'E'
        THEN 'Eligible'
      ELSE 'Ineligible'
      END                                                          AS enrolled_status,
      CASE WHEN SUBSTRING(ps_class, 4, 1) = 'K'
        THEN 'Kaiser NW'
      WHEN SUBSTRING(ps_class, 4, 1) = 'H'
        THEN 'Kaiser WA'
      WHEN SUBSTRING(ps_class, 4, 1) = 'P'
        THEN 'Kaiser WA'
      WHEN SUBSTRING(ps_class, 4, 1) = 'T'
        THEN 'Aetna'
      ELSE ''
      END                                                          AS health_plan
    FROM hbt.eligibility AS e
      LEFT JOIN staging.zasid_mapping AS z
        ON CAST(e.ps_ss_nbr AS VARCHAR) = z.kn_number
      LEFT JOIN hbt.demographic AS d
        ON CAST(e.ps_ss_nbr AS VARCHAR) = d.prt_ss_nbr
      LEFT JOIN acquisition.sf_contact AS c
        ON z.contactid = c.contactid
    WHERE ps_employer_code NOT IN ('90001', '4000', '145', '146', '156', '147', '900', '157', '90003', '90002', '143',
                                   '155', '167', '122', '136', '152', '166', '201', '220')
          AND ps_date = '2018-08-01' --REPORTING PERIOD
          AND ps_6_hours > 0
    GROUP BY ps_ss_nbr, name_last, name_first, COALESCE(c.birthdate :: date, prt_birth_date :: date), city, zip_code,
      enrolled_status, health_plan
)
SELECT
  DISTINCT
  c.contactid                   AS contactid18,
  SUBSTRING(c.contactid, 1, 15) AS contactid15,
  c.firstname                   AS name_first,
  c.lastname                    AS name_last,
  communication_language        AS preferred_language,
  mailingcity                   AS mailing_city,
  mailingstate                  AS mailing_state,
  mailingpostalcode             AS mailing_zip,
  mailingcountry                AS mailing_country,
  c.email,
  secondary_email               AS email_secondary,
  CASE WHEN mobilephone != ''
    THEN CONCAT('1', REGEXP_REPLACE(mobilephone, '[^0-9]'))
  WHEN mobilephone = ''
    THEN CONCAT('1', REGEXP_REPLACE(phone, '[^0-9]')) --phone_daytime
  ELSE homephone --phone_evening
  END                           AS phone_text,
  CASE WHEN preferred_phone_number = 'Daytime Phone'
    THEN CONCAT('1', REGEXP_REPLACE(phone, '[^0-9]')) --phone_daytime
  WHEN preferred_phone_number = 'Evening Phone'
    THEN CONCAT('1', REGEXP_REPLACE(homephone, '[^0-9]')) --phone_evening
  WHEN preferred_phone_number = 'Mobile'
    THEN CONCAT('1', REGEXP_REPLACE(mobilephone, '[^0-9]'))
  WHEN preferred_phone_number = ''
    THEN CONCAT('1', REGEXP_REPLACE(phone, '[^0-9]')) --phone_daytime
  WHEN preferred_phone_number = '' AND phone = ''
    THEN CONCAT('1', REGEXP_REPLACE(mobilephone, '[^0-9]'))
  ELSE CONCAT('1', REGEXP_REPLACE(homephone, '[^0-9]')) --phone_evening
  END                           AS phone_robocall,
  phone                         AS phone_daytime,
  mobilephone                   AS phone_mobile,
  homephone                     AS phone_evening,
  preferred_phone_number        AS preferred_phone,
  CASE WHEN emailbounceddate IS NOT NULL
    THEN 'OUT'
  WHEN opt_out_do_not_contact = TRUE
    THEN 'OUT'
  WHEN b.email_status = 'Bounced'
    THEN 'OUT'
  WHEN o.optout = 'OptOut'
    THEN 'OUT'
  ELSE ''
  END                           AS optout,
  enrolled_status
FROM ginger_text AS g
  LEFT JOIN staging.zasid_mapping AS z
    ON CAST(ps_ss_nbr AS VARCHAR) = z.kn_number
  LEFT JOIN acquisition.sf_contact AS c
    ON z.contactid = c.contactid
  LEFT JOIN staging.bademails AS b
    ON c.contactid = b.contactid
  LEFT JOIN staging.optouts AS o
    ON z.student_id = o.studentid
/* Last name and birthdate critical for Ginger.io's eligibility verification */
WHERE name_last != ''
      AND g.birthdate IS NOT NULL
      AND contactid18 IS NOT NULL
ORDER BY name_last, name_first;
